services:
  # Service Redis
  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      REDIS_HOST: redis
    volumes:
      - redis-data:/data
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]  # Utilisation du mot de passe Redis
      interval: 5s
      timeout: 3s
      retries: 3
    restart: on-failure:5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # Service PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST: postgres 
      POSTGRES_USER: ${POSTGRES_USER}  # Utilisation d'une variable d'environnement
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Utilisation d'une variable d'environnement
      POSTGRES_DB: postgres 
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: on-failure:5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M

  # Service Worker (.NET)
  worker:
    build:
      context: ./worker
    container_name: worker
    networks:
      - backend
    environment:
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres  # Utilisation d'une variable d'environnement
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "dotnet", "/app/Worker.dll", "--check"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: on-failure:5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Service Result (Node.js)
  result:
    build:
      context: ./result
    container_name: result
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - frontend
      - backend
    environment:
      NODE_ENV: ${NODE_ENV}  # Utilisation d'une variable d'environnement
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: on-failure:5
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 256M

  # Service Vote (Python)
  vote:
    build:
      context: ./vote
    container_name: vote
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - frontend
    environment:
      FLASK_ENV: ${FLASK_ENV}  # Utilisation d'une variable d'environnement
      REDIS_HOST: redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: on-failure:5
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 256M

# Volume pour PostgreSQL
volumes:
  postgres-data:
  redis-data:

# RÃ©seau pour interconnecter les services
networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge